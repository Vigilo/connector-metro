[bus]
# Liste des serveurs AMQP (noms ou adresses IP) à utiliser,
# séparés par des virgules. Un numéro de port peut être spécifié
# en ajoutant ":" suivi du numéro après le nom / l'adresse du serveur.
# Par défaut, le port 5670 est utilisé lorsque l'option "use_ssl" vaut
# False ou 5671 lorsque l'option vaut True.
hosts = localhost

# Nom d'utilisateur à utiliser pour se connecter au bus.
user = connector-metro

# Mot de passe à utiliser
password = connector-metro

# Chiffrement du flux par SSL
use_ssl = False

# Nom de la file d'attente du connecteur
queue = connector-metro-localhost

# Durée de vie des messages en secondes (0 si infinie)
# Note : La durée de vie s'applique directement au niveau de la file d'attente
#        du connecteur, si un message dépasse cette durée de vie le bus le
#        supprimera.
#queue_messages_ttl = 0

# Liste des abonnements du connecteur, séparés par des virgules.
# Si la liste est vide, mettre uniquement une virgule.
# Syntaxe : <nom-du-noeud>[:<clé-de-routage>]
# Exemple : foo:bar, baz:qux
subscriptions = perf

# Le trafic lié au bus doit-il être enregistré dans les logs ?
log_traffic = False

# Nombre de messages à récupérer simultanément depuis le bus.
# La valeur par défaut (5) convient pour la plupart des déploiements.
# Une valeur plus élevée peut améliorer les performances pour les parcs
# de grande taille. Néanmoins, une valeur trop élevée peut également
# dégrader les performances.
#prefetch_count = 5

[connector-metro]
# Fichier de config distribué par VigiConf
config = @SYSCONFDIR@/vigilo/vigiconf/prod/connector-metro.db

# Le dossier où seront stockés les fichiers RRD
rrd_base_dir = @LOCALSTATEDIR@/lib/vigilo/rrd

# Cette option permet de configurer l'arborescence des dossiers dans lesquels
# seront stockés les RRD. Les valeurs suivantes sont possibles :
# - flat : le dossier au nom de l'hôte sera placé à la racine de rrd_base
# (ci-dessus). Convient pour un faible nombre d'hôtes.
# - name : une arborescence sera créée en utilisant les deux premiers
# caractères du nom de l'hôte. Convient pour des installations de grande
# taille dans lesquelles les hôtes ont des noms dont les deux premiers
# caractères diffèrent.
# - hash : une arborescence sera créé en utilisant les deux premiers caractères
# du hash MD5 du nom de l'hôte. Convient pour des installations de grande
# taille dont les hôtes ont des noms avec un préfixe commun.
# Cette option doit être réglée à l'identique de celle de VigiRRD
rrd_path_mode = hash

# Le chemin vers l'exécutable "rrdtool"
rrd_bin = /usr/bin/rrdtool

# Nombre de processus rrdtool à lancer. Capacité mesurée pour un processus:
# un peu plus de 100 mises à jour par seconde sur une machine moderne (2010).
#rrd_processes = 4

# Utilisation du démon de mise à jour RRDCacheD. Nécessite RRDTool >= 1.4
#rrdcached = @LOCALSTATEDIR@/lib/vigilo/connector-metro/rrdcached.sock

# Vérifier les seuils des indicateurs concernés. À désactiver s'il s'agit d'une
# instance de connector-metro dédiée à la sauvegarde. Par défaut: True
#check_thresholds = True


[connector]
# Nom d'hôte utilisé pour signaler à Vigilo que ce connecteur fonctionne
# correctement. Cela doit correspondre au nom d'hôte configuré dans VigiConf
# pour cette machine. Par défaut, on utilise le nom d'hôte court (sans le
# domaine DNS)
#hostname = hostname

# Service utilisé pour signaler à Vigilo que ce connecteur fonctionne
# correctement. Comme ci-dessus, cela doit correspondre au nom de service
# configuré dans VigiConf.
#status_service = vigilo-connector-metro

# Ces paramètres permettent de surcharger les valeurs présentes dans la
# section [publications] pour les messages d'auto-supervision du connecteur.
#self_monitoring_nagios_exchange = nagios
#self_monitoring_perf_exchange = perf


[publications]
# Types de messages et le nom de l'exchange à utiliser pour leur publication.
# Par défaut, un exchange du même nom que le type est utilisé.
# Les entrées dans cette section sont de la forme :
#     type_de_message = exchange[:duree_de_vie_en_secondes]
#----------------------------------------------------
#perf = perf
#nagios = nagios


# -------
# Logging
#

[loggers]
keys = root,twisted

[handlers]
keys = syslog,console,errors

[formatters]
keys = consoleFormatter,syslogFormatter,errorFormatter

[logger_root]
level = INFO
handlers = syslog,console,errors

[logger_twisted]
level = WARNING
qualname = twisted
propagate = 0
handlers = syslog,console,errors

[handler_console]
class = StreamHandler
level = NOTSET
formatter = consoleFormatter
args = (sys.stdout,)

[handler_syslog]
class = handlers.SysLogHandler
level = NOTSET
formatter = syslogFormatter
args = '/dev/log', 'daemon'

[handler_errors]
level = ERROR
class = handlers.RotatingFileHandler
args = ('@LOCALSTATEDIR@/log/vigilo/connector-metro/error.log', 'a', 1024*1024*10, 5)
formatter = errorFormatter

[formatter_consoleFormatter]
format = [%(created)f] %(levelname)s::%(name)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter

[formatter_syslogFormatter]
format = %(processName)s[%(process)d]: %(levelname)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter

[formatter_errorFormatter]
format = %(asctime)s %(levelname)s %(name)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter
