# vim: set fileencoding=utf-8 sw=4 ts=4 et :
# Copyright (C) 2006-2011 CS-SI
# License: GNU GPL v2 <http://www.gnu.org/licenses/gpl-2.0.html>

"""Metrology to RRDTool connector."""
import sys, os

from zope.interface import implements
from twisted.plugin import IPlugin
from twisted.application import service


from vigilo.common.gettext import translate
from vigilo.connector import client
from vigilo.connector import options as base_options

_ = translate('vigilo.connector_metro')

class MetroConnectorServiceMaker(object):
    """
    Creates a service that wraps everything the connector needs.
    """
    implements(service.IServiceMaker, IPlugin)
    tapname = "vigilo-metro"
    description = "Vigilo connector for performance data"
    options = base_options.Options

    def makeService(self, options):
        """ the service that wraps everything the connector needs. """
        from vigilo.common.conf import settings
        if options["config"] is not None:
            settings.load_file(options["config"])
        else:
            settings.load_module('vigilo.connector_metro')

        from vigilo.common.logging import get_logger
        LOGGER = get_logger('vigilo.connector_metro')

        from vigilo.connector_metro.nodetorrdtool import NodeToRRDtoolForwarder

        try:
            conf_ = settings['connector-metro']['config']
        except KeyError:
            LOGGER.error(_("Please set the path to the configuration "
                "database generated by VigiConf in the settings.ini."))
            sys.exit(1)

        xmpp_client = client.client_factory(settings)

        try:
            message_consumer = NodeToRRDtoolForwarder(conf_)
        except OSError, e:
            LOGGER.exception(e)
            raise
        message_consumer.setHandlerParent(xmpp_client)

        # Pr√©sence
        from vigilo.connector.presence import PresenceManager
        presence_manager = PresenceManager()
        presence_manager.setHandlerParent(xmpp_client)
        message_consumer.registerProducer(presence_manager, True)

        # Statistiques
        from vigilo.connector.status import StatusPublisher
        servicename = options["name"]
        if servicename is None:
            servicename = "vigilo-connector-metro"
        stats_publisher = StatusPublisher(message_consumer,
                        settings["connector"].get("hostname", None),
                        servicename=servicename,
                        node=settings["connector"].get("status_node", None))
        stats_publisher.setHandlerParent(xmpp_client)

        root_service = service.MultiService()
        xmpp_client.setServiceParent(root_service)
        return root_service

metro_connector = MetroConnectorServiceMaker()
